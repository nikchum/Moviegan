{"version":3,"file":"static/js/855.9ea62d35.chunk.js","mappings":"iQAEAA,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAEL,SAASC,IACd,OAAOF,IAAAA,IAAA,uCAA0CC,GAClD,CAEM,SAASE,EAAiBC,GAC/B,OAAOJ,IAAAA,IAAA,gCACoBC,EADpB,kBACiCG,EADjC,+BAGR,CAEM,SAASC,EAAaC,GAC3B,OAAON,IAAAA,IAAA,iBAAoBM,EAApB,oBAAkCL,GAC1C,CAEM,SAASM,EAAiBD,GAC/B,OAAON,IAAAA,IAAA,iBAAoBM,EAApB,4BAA0CL,GAClD,CAEM,SAASO,EAAoBF,GAClC,OAAON,IAAAA,IAAA,iBAAoBM,EAApB,4BAA0CL,GAClD,C,wICxBD,EAAuB,mBAAvB,EAAiD,mBAAjD,EAA0E,kBAA1E,EAAmG,mBAAnG,EAA6H,mB,SCOhHQ,EAAO,WAClB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAUR,OARAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,IACbP,EAAAA,EAAAA,IAAiBQ,GACdG,MAAK,gBAAWC,EAAX,EAAGR,KAAQQ,KAAX,OAAwBP,EAAQO,EAAhC,IACLC,MAAMC,QAAQC,KACdC,SAAQ,kBAAMT,GAAa,EAAnB,GACZ,GAAE,CAACC,KAGF,UAACS,EAAA,EAAD,WACGX,IAAa,SAACY,EAAA,EAAD,KACd,eAAIC,UAAWC,EAAf,SACGhB,GACCA,EAAKiB,KAAI,YAAqD,IAAlDtB,EAAiD,EAAjDA,GAAIuB,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UACrCC,EAAWH,EAAY,UACtBI,EAAAA,GADsB,OACXJ,GACd,gFAEJ,OACE,gBAAIH,UAAWC,EAAf,WACE,gBACED,UAAWC,EACXO,MAAO,IACPC,IAAKH,EACLI,IAAKN,KAEP,cAAGJ,UAAWC,EAAd,SAAuBG,KACvB,eAAGJ,UAAWC,EAAd,wBAAkCI,OARRzB,EAW/B,QAIV,C,uDC/CM,IAAM2B,EAAW,gC","sources":["api/movieDbApi.js","webpack://moviegan/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.js","constans/pathImgDB.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = 'a1b67e21d001fd0b301e3f4d42b48ca7';\n\nexport function getTrandingMovies() {\n  return axios.get(`/trending/movie/week?api_key=${KEY}`);\n}\n\nexport function getMoviesByQuery(query) {\n  return axios.get(\n    `/search/movie?api_key=${KEY}&query=${query}&page=1&include_adult=false`\n  );\n}\n\nexport function getMovieById(id) {\n  return axios.get(`/movie/${id}?api_key=${KEY}`);\n}\n\nexport function getMovieCastById(id) {\n  return axios.get(`/movie/${id}/credits?api_key=${KEY}`);\n}\n\nexport function getMovieReviewsById(id) {\n  return axios.get(`/movie/${id}/reviews?api_key=${KEY}`);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__GlWio\",\"item\":\"Cast_item__a0CDL\",\"img\":\"Cast_img__-isbW\",\"name\":\"Cast_name__6UbFm\",\"char\":\"Cast_char__Zhyrf\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCastById } from '../../api/movieDbApi';\nimport { IMG_PATH } from '../../constans/pathImgDB';\nimport { Loader } from 'components/Loader';\nimport { Container } from 'components/Container';\nimport s from './Cast.module.css';\n\nexport const Cast = () => {\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    getMovieCastById(movieId)\n      .then(({ data: { cast } }) => setData(cast))\n      .catch(console.log)\n      .finally(() => setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <Container>\n      {isLoading && <Loader />}\n      <ul className={s.list}>\n        {data &&\n          data.map(({ id, profile_path, original_name, character }) => {\n            const checkimg = profile_path\n              ? `${IMG_PATH}${profile_path}`\n              : 'https://img.freepik.com/free-vector/red-prohibited-sign_1284-42862.jpg?w=2000';\n\n            return (\n              <li className={s.item} key={id}>\n                <img\n                  className={s.img}\n                  width={200}\n                  src={checkimg}\n                  alt={original_name}\n                />\n                <p className={s.name}>{original_name}</p>\n                <p className={s.char}>Character: {character}</p>\n              </li>\n            );\n          })}\n      </ul>\n    </Container>\n  );\n};\n","export const IMG_PATH = 'http://image.tmdb.org/t/p/w500';\n"],"names":["axios","KEY","getTrandingMovies","getMoviesByQuery","query","getMovieById","id","getMovieCastById","getMovieReviewsById","Cast","useState","data","setData","isLoading","setIsLoading","movieId","useParams","useEffect","then","cast","catch","console","log","finally","Container","Loader","className","s","map","profile_path","original_name","character","checkimg","IMG_PATH","width","src","alt"],"sourceRoot":""}